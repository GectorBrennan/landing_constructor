version: '3.4'

# Volumes
volumes:
  redis:
    driver: local
  dbdata:
    driver: local
  pgdata:
    driver: local

# Networks
networks:
  backend:
    driver: bridge

services:
  # Redis
  #  redis:
  #    image: redis:alpine
  #    container_name: redis
  #    ports:
  #      - "63791:6379"
  #    environment:
  #      - ALLOW_EMPTY_PASSWORD=yes
  #    volumes:
  #      - redis:/data
  #    networks:
  #      - backend

  # Postgres
  #  database:
  #    image: postgres:alpine
  #    container_name: database
  #    ports:
  #      - "54321:5432"
  #    restart: always
  #    volumes:
  #      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
  ##      - pgdata:/var/lib/postgresql/data
  #    environment:
  #      POSTGRES_DB: posts
  #      POSTGRES_PASSWORD: sysadmin
  #      POSTGRES_USER: postgres
  #      PGDATA : /var/lib/postgresql/data/pgdata
  #    healthcheck:
  #      test: ["CMD-SHELL", "pg_isready -U postgres"]
  #      interval: 10s
  #      timeout: 5s
  #      retries: 5
  #    networks:
  #      - backend

  # MySQL
  database:
    image: mysql:5.7
    container_name: database
    restart: unless-stopped
    tty: true
    ports:
    - "3306:3306"
    environment:
      #      - SERVICE_TAGS=dev
      #      - SERVICE_NAME=database
      #      - MYSQL_ROOT_PASSWORD=root
      #      - MYSQL_DATABASE=root
      #      - MYSQL_USER=root
      #      - MYSQL_PASSWORD=root
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: root
      MYSQL_USER: root
      MYSQL_PASSWORD: root

    volumes:
    - ./docker/data/mysql:/var/lib/mysql
    - ./docker/mysql/my.cnf:/etc/mysql/my.cnf
    networks:
    - backend
    hostname: mysql

  # PHP
  app:
    build:
      context: '.'
      dockerfile: './docker/app/Dockerfile'
    container_name: app
    restart: unless-stopped
    tty: true
    ports:
    - "9000:9000"
    depends_on:
    #      - redis
    - database
    working_dir: /var/www
    volumes:
    - ./:/var/www
    - ./docker/app/local.ini:/usr/local/etc/php/conf.d/local.ini
    environment:
    - SERVICE_TAGS=dev
    - SERVICE_NAME=app
    - DB_HOST=database
    - DB_USERNAME=root
    # For my_sql
    #      - DB_USERNAME=root
    - REDIS_HOST=redis
    networks:
    - backend

  # Nginx
  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    tty: true
    ports:
    - "80:80"
    volumes:
    - ./:/var/www
    - ./docker/nginx/conf.d/:/etc/nginx/conf.d
    depends_on:
    - app
    networks:
    - backend